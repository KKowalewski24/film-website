{"version":3,"sources":["serviceWorker.js","main/controller/StorageController.js","component/util/private-route/PrivateRoute.js","config.js","main/controller/ContextProvider.js","main/GlobalStyles.js","page/basic-functionality/search-page/SearchPage.js","constants.js","component/text-panel/TextPanel.js","page/util/about-page/AboutPage.js","page/util/contact-page/ContactPage.js","component/util/error-message/ErrorMessage.js","component/util/fetch-data-controller/FetchDataController.js","component/movie-card/MovieCard.js","page/basic-functionality/result-page/ResultPage.js","page/util/error-page/ErrorPage.js","main/controller/AccountController.js","page/account/login-page/LoginPage.js","page/account/register-page/RegisterPage.js","page/basic-functionality/home-page/HomePage.js","component/movie-details/MovieDetails.js","page/basic-functionality/details-page/DetailsPage.js","component/account-panel/AccountPanel.js","page/account/account-page/AccountPage.js","main/controller/Routes.js","component/navbar/Navbar.js","main/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SessionStorageSaveItem","key","item","sessionStorage","setItem","JSON","stringify","SessionStorageGetItem","parse","getItem","PrivateRoute","privacyCondition","redirectPath","Component","component","rest","render","it","to","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","AppContext","createContext","ContextProvider","props","useState","firebaseAuthState","setFirebaseAuthState","isUserLoggedIn","setIsUserLoggedIn","useEffect","auth","onAuthStateChanged","Provider","value","children","GlobalStyles","makeStyles","materialBlueBackground","backgroundColor","palette","primary","main","materialBlueFont","color","SearchPage","isRedirect","setIsRedirect","useForm","register","handleSubmit","globalStyles","className","Avatar","Typography","variant","onSubmit","data","TextField","type","inputRef","required","name","label","margin","fullWidth","autoFocus","min","max","Date","getFullYear","maxLength","Button","SLASH","TextPanel","backgroundColorStyles","title","isContentCentered","content","AboutPage","ContactPage","ErrorMessage","message","styles","redirectMessage","FetchDataController","isLoaded","isError","errorMessageObject","LinearProgress","MovieCard","renderMovieProperty","fontSize","gridStyles","onClick","movie","src","posterPath","alt","titleStyles","popularity","voteAverage","voteCount","releaseDate","ResultPage","movieArray","setMovieArray","pageNumber","setPageNumber","setIsLoaded","setIsError","fetchData","axios","get","API_LINK_BASIC","params","api_key","language","query","year","page","then","res","concat","Array","from","results","catch","err","pageStart","next","hasMore","dataLength","length","loader","map","index","poster_path","vote_average","vote_count","release_date","ErrorPage","readDataFromDatabase","path","eventType","setDataFunction","isSnapshotValue","currentUser","database","ref","on","val","registerUser","firstName","lastName","email","password","nameData","createUserWithEmailAndPassword","sendEmailVerification","alert","childPath","reference","child","once","set","setDataToDatabase","USERS_PATH","uid","logoutUser","signOut","addFavouriteMovie","update","updateDataToDatabase","id","removeFavouriteMovie","remove","deleteDataFromDatabase","LoginPage","signInWithEmailAndPassword","RegisterPage","HomePage","MovieDetails","renderSectionTitle","renderBadge","array","badgeStyles","renderCell","genres","productionCountries","productionCompanies","overview","DetailsPage","movieDetails","setMovieDetails","useContext","chosenMovieStorage","production_countries","production_companies","AccountPanel","renderDataElement","emailVerified","lastSignInTime","creationTime","AccountPage","userData","setUserData","favouriteMovieArray","setFavouriteMovieArray","setFormatUserData","setObjectToArray","object","Object","entries","metadata","Routes","exact","Navbar","noWrap","msg","Switch","checked","isDarkMode","onChange","handleDarkMode","data-toggle","data-target","aria-controls","aria-expanded","aria-label","IconButton","logout","App","setIsDarkMode","darkTheme","createMuiTheme","grey","light","ThemeProvider","theme","CssBaseline","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8201e68.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === \"[::1]\" ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/*----------------------- SESSION STORAGE -----------------------*/\r\nexport const SessionStorageSaveItem = (key, item) => {\r\n  sessionStorage.setItem(key, JSON.stringify(item));\r\n};\r\n\r\nexport const SessionStorageGetItem = (key) => {\r\n  return JSON.parse(sessionStorage.getItem(key));\r\n};\r\n\r\nexport const SessionStorageRemoveItem = (key) => {\r\n  sessionStorage.removeItem(key);\r\n};\r\n\r\nexport const SessionStorageClear = () => {\r\n  sessionStorage.clear();\r\n};\r\n\r\n/*----------------------- LOCAL STORAGE -----------------------*/\r\nexport const LocalStorageSaveItem = (key, item) => {\r\n  localStorage.setItem(key, JSON.stringify(item));\r\n};\r\n\r\nexport const LocalStorageGetItem = (key) => {\r\n  return JSON.parse(localStorage.getItem(key));\r\n};\r\n\r\nexport const LocalStorageRemoveItem = (key) => {\r\n  localStorage.removeItem(key);\r\n};\r\n\r\nexport const LocalStorageClear = () => {\r\n  localStorage.clear()\r\n};\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = ({privacyCondition, redirectPath, component: Component, ...rest}) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(it) =>\r\n        !!privacyCondition ? <Component {...it}/> : <Redirect to={redirectPath}/>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nPrivateRoute.propTypes = {\r\n  exact: propTypes.bool.isRequired,\r\n  path: propTypes.string.isRequired,\r\n  component: propTypes.func.isRequired,\r\n  privacyCondition: propTypes.any,\r\n  redirectPath: propTypes.string.isRequired,\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nexport const config = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n});\r\n\r\nexport default config;\r\n    ","import React, {createContext, useEffect, useState} from \"react\";\r\nimport config from \"../../config\";\r\n\r\nexport const AppContext = createContext(null);\r\n\r\nexport const ContextProvider = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [firebaseAuthState, setFirebaseAuthState] = useState(null);\r\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    config.auth().onAuthStateChanged(setFirebaseAuthState);\r\n    firebaseAuthState ? setIsUserLoggedIn(true) : setIsUserLoggedIn(false);\r\n  }, [firebaseAuthState]);\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <AppContext.Provider value={{isUserLoggedIn}}>\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nContextProvider.propTypes = {};\r\n\r\nexport default ContextProvider;\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nexport const GlobalStyles = makeStyles(it => ({\r\n  materialBlueBackground: {\r\n    backgroundColor: it.palette.primary.main,\r\n  },\r\n  materialBlueFont: {\r\n    color: it.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default GlobalStyles;\r\n    ","import React, {useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {SessionStorageSaveItem} from \"../../../main/controller/StorageController\";\r\nimport {PATH_RESULT, SEARCHED_MOVIE_DATA} from \"../../../constants\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"../../../index.css\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const SearchPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [isRedirect, setIsRedirect] = useState(false);\r\n  const {register, handleSubmit} = useForm();\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const onSubmit = (data) => {\r\n    SessionStorageSaveItem(SEARCHED_MOVIE_DATA, data);\r\n    // document.location.replace(PATH_RESULT);\r\n    setIsRedirect(true);\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container custom-container-sm custom-margin-top-4\">\r\n\r\n      <div className=\"row justify-content-center mb-2\">\r\n        <Avatar className={globalStyles.materialBlueBackground}>\r\n          <SearchIcon/>\r\n        </Avatar>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center mb-2\">\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Search Movie\r\n        </Typography>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <TextField\r\n          type=\"text\"\r\n          inputRef={register({required: true})}\r\n          name=\"title\"\r\n          label=\"Movie Title\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          autoFocus\r\n        />\r\n\r\n        <TextField\r\n          type=\"number\"\r\n          inputRef={register({min: 1900, max: new Date().getFullYear(), maxLength: 4})}\r\n          name=\"year\"\r\n          label=\"Release year\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n        />\r\n\r\n        <Button type=\"submit\" className=\"mt-4\" variant=\"contained\" color=\"primary\" fullWidth>\r\n          Search\r\n        </Button>\r\n\r\n      </form>\r\n      {isRedirect ? <Redirect to={PATH_RESULT}/> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchPage.propTypes = {};\r\n\r\nexport default SearchPage;\r\n    ","/*---------- STRINGS ----------*/\r\nexport const SLASH = \"/\";\r\nexport const ABOUT = \"about\";\r\nexport const CONTACT = \"contact\";\r\nexport const RESULT = \"result\";\r\nexport const LOGIN = \"login\";\r\nexport const REGISTER = \"register\";\r\nexport const SEARCH = \"search\";\r\nexport const DETAILS = \"details\";\r\nexport const ACCOUNT = \"account\";\r\n\r\n/*---------- PATHS ----------*/\r\nexport const PATH_LOGIN = SLASH + LOGIN;\r\nexport const PATH_REGISTER = SLASH + REGISTER;\r\nexport const PATH_ACCOUNT = SLASH + ACCOUNT;\r\n\r\nexport const PATH_HOME = SLASH;\r\nexport const PATH_RESULT = SLASH + RESULT;\r\nexport const PATH_SEARCH = SLASH + SEARCH;\r\nexport const PATH_DETAILS = SLASH + DETAILS;\r\n\r\nexport const PATH_ABOUT = SLASH + ABOUT;\r\nexport const PATH_CONTACT = SLASH + CONTACT;\r\n\r\n/*---------- API ----------*/\r\nconst API_LINK_BASIC = \"https://api.themoviedb.org/3\";\r\nexport const API_LINK_SEARCH_MOVIE = API_LINK_BASIC + \"/search/movie\";\r\nexport const API_LINK_POPULAR_MOVIE = API_LINK_BASIC + \"/movie/popular\";\r\nexport const API_LINK_DETAILS_MOVIE = API_LINK_BASIC + \"/movie\" + SLASH;\r\nexport const LANG_EN_US = \"en-US\";\r\nexport const API_LINK_IMAGE = \"http://image.tmdb.org/t/p/w500\";\r\n\r\n/*---------- STORAGE KEY ----------*/\r\nexport const SEARCHED_MOVIE_DATA = \"searchedMovieData\";\r\nexport const CHOSEN_MOVIE = \"chosenMovieId\";\r\n\r\n/*---------- DATABASE PATHS ----------*/\r\nconst USERS = \"users\";\r\nconst FAVOURITES = \"favourites\";\r\nexport const USERS_PATH = SLASH + USERS;\r\nexport const FAVOURITES_PATH = SLASH + FAVOURITES;\r\nexport const VALUE = \"value\";\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"../../index.css\";\r\n\r\nexport const TextPanel = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className={\"card mt-5 \" + props.backgroundColorStyles}>\r\n      <div className=\"card-body\">\r\n        <h3 className=\"card-title text-center mt-2 mb-4\">\r\n          {props.title}\r\n        </h3>\r\n        <h5 className={props.isContentCentered ?\r\n          \"text-center custom-text-pre-wrap\" : \"text-justify custom-text-pre-wrap\"}>\r\n          {props.content}\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTextPanel.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  content: propTypes.string.isRequired,\r\n  backgroundColorStyles: propTypes.string.isRequired,\r\n  isContentCentered: propTypes.bool,\r\n};\r\n\r\nexport default TextPanel;\r\n    ","import React from \"react\";\r\nimport TextPanel from \"../../../component/text-panel/TextPanel\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\n\r\nexport const AboutPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const globalStyles = GlobalStyles();\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container custom-container-md text-white\">\r\n      <TextPanel\r\n        title={\"About Project\"}\r\n        content={\"Film Website is decicated to movie enthusiasts. \" +\r\n        \"Provides possibility to search movie, read information about them. \" +\r\n        \"Registered user can add movie to favourites and share best movies with friends.\"}\r\n        backgroundColorStyles={globalStyles.materialBlueBackground}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nAboutPage.propTypes = {};\r\n\r\nexport default AboutPage;\r\n    ","import React from \"react\";\r\nimport TextPanel from \"../../../component/text-panel/TextPanel\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\n\r\nexport const ContactPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const globalStyles = GlobalStyles();\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container custom-container-md text-white\">\r\n      <TextPanel\r\n        title={\"Contact\"}\r\n        content={\r\n          \"Kamil Kowalewski\\n\" +\r\n          \"Email: KamilKowalewski@gmail.com\\n\" +\r\n          \"GitHub: KKowalewski24\\n\"\r\n        }\r\n        backgroundColorStyles={globalStyles.materialBlueBackground}\r\n        isContentCentered={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nContactPage.propTypes = {};\r\n\r\nexport default ContactPage;\r\n    ","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"../../../index.css\";\r\n\r\nexport const ErrorMessage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"custom-margin-text text-center\">\r\n        <h1 className=\"font-weight-bold custom-font-size-7\">\r\n          {props.title}\r\n        </h1>\r\n        <h2 className=\"font-weight-bold\">\r\n          {props.message}\r\n        </h2>\r\n        <Link to={props.redirectPath} className={props.styles}>\r\n          <h5>\r\n            {props.redirectMessage}\r\n          </h5>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nErrorMessage.propTypes = {\r\n  title: propTypes.string,\r\n  message: propTypes.string.isRequired,\r\n  redirectPath: propTypes.string.isRequired,\r\n  redirectMessage: propTypes.string.isRequired,\r\n  styles: propTypes.string,\r\n};\r\n\r\nexport default ErrorMessage;\r\n    ","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport ErrorMessage from \"../error-message/ErrorMessage\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n/* Sample usage of axios get to copy and redone\r\n----------------------------------------------------------------\r\nconst [data, setData] = useState();\r\nconst [isLoaded, setIsLoaded] = useState(false);\r\nconst [isError, setIsError] = useState(false);\r\n\r\nuseEffect(() => {\r\n  axios.get(LINK, {\r\n    params: {\r\n\r\n    }\r\n  })\r\n    .then((res) => {\r\n      setData(res.data);\r\n      setIsLoaded(true);\r\n      setIsError(false);\r\n    })\r\n    .catch((err) => {\r\n      setIsLoaded(true);\r\n      setIsError(true);\r\n    });\r\n}, []);\r\n----------------------------------------------------------------\r\n*/\r\n\r\nexport const FetchDataController = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  if (props.isLoaded) {\r\n    if (!props.isError) {\r\n      return (\r\n        props.children\r\n      );\r\n    } else {\r\n      return (\r\n        <ErrorMessage\r\n          title={props.errorMessageObject.title}\r\n          message={props.errorMessageObject.message}\r\n          redirectPath={props.errorMessageObject.redirectPath}\r\n          redirectMessage={props.errorMessageObject.redirectMessage}\r\n          styles={props.errorMessageObject.styles}\r\n        />\r\n      );\r\n    }\r\n  } else {\r\n    return (\r\n      <LinearProgress\r\n        variant=\"query\"\r\n        color=\"secondary\"\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nFetchDataController.propTypes = {\r\n  isLoaded: propTypes.bool.isRequired,\r\n  isError: propTypes.bool.isRequired,\r\n  errorMessageObject: propTypes.object.isRequired,\r\n};\r\n\r\nexport default FetchDataController;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {SessionStorageSaveItem} from \"../../main/controller/StorageController\";\r\nimport {API_LINK_IMAGE, CHOSEN_MOVIE} from \"../../constants\";\r\nimport GradeIcon from \"@material-ui/icons/Grade\";\r\n\r\nexport const MovieCard = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const setChosenMovie = () => {\r\n    SessionStorageSaveItem(CHOSEN_MOVIE, props.movie)\r\n  };\r\n\r\n  const renderMovieProperty = (key, value) => {\r\n    return (\r\n      <div className=\"text-dark\">\r\n        <GradeIcon fontSize=\"inherit\" className=\"mb-1\"/>\r\n        {key + \": \"}\r\n        <span className=\"text-nowrap\">\r\n          {value}\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className={\"card view overlay \" + props.gridStyles}>\r\n      <Link to={props.redirectPath} onClick={setChosenMovie}>\r\n\r\n        {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\r\n        <img src={API_LINK_IMAGE + props.posterPath}\r\n             className=\"card-img-top\" alt=\"Movie Image\"\r\n        />\r\n\r\n        <div className=\"mask rgba-black-light\"/>\r\n\r\n        <div className=\"card-body\">\r\n          <h6 className={\"font-weight-bold \" + props.titleStyles}>\r\n            {props.title}\r\n          </h6>\r\n\r\n          {renderMovieProperty(\"Popularity\", props.popularity)}\r\n          {renderMovieProperty(\"Average Vote\", props.voteAverage)}\r\n          {renderMovieProperty(\"Vote Number\", props.voteCount)}\r\n          {renderMovieProperty(\"Release Date\", props.releaseDate)}\r\n\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieCard.propTypes = {\r\n  redirectPath: propTypes.string.isRequired,\r\n  movie: propTypes.object.isRequired,\r\n  title: propTypes.string.isRequired,\r\n  posterPath: propTypes.string.isRequired,\r\n  popularity: propTypes.number,\r\n  voteAverage: propTypes.number,\r\n  voteCount: propTypes.number,\r\n  releaseDate: propTypes.string,\r\n  gridStyles: propTypes.string.isRequired,\r\n  titleStyles: propTypes.string,\r\n};\r\n\r\nexport default MovieCard;\r\n    ","import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {SessionStorageGetItem} from \"../../../main/controller/StorageController\";\r\nimport FetchDataController from \"../../../component/util/fetch-data-controller/FetchDataController\";\r\nimport MovieCard from \"../../../component/movie-card/MovieCard\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {\r\n  API_LINK_SEARCH_MOVIE,\r\n  LANG_EN_US,\r\n  PATH_DETAILS,\r\n  PATH_SEARCH,\r\n  SEARCHED_MOVIE_DATA\r\n} from \"../../../constants\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\nimport \"../../../index.css\";\r\n\r\nexport const ResultPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [movieArray, setMovieArray] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const fetchData = () => {\r\n    axios.get(API_LINK_SEARCH_MOVIE, {\r\n      params: {\r\n        api_key: process.env.REACT_APP_API_ACCESS,\r\n        language: LANG_EN_US,\r\n        query: SessionStorageGetItem(SEARCHED_MOVIE_DATA).title,\r\n        year: SessionStorageGetItem(SEARCHED_MOVIE_DATA).year,\r\n        page: pageNumber + 1,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        setMovieArray(movieArray.concat(Array.from(res.data.results)));\r\n        setPageNumber(res.data.page);\r\n        setIsLoaded(true);\r\n        setIsError(false);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoaded(true);\r\n        setIsError(true);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <InfiniteScroll\r\n      pageStart={0}\r\n      next={fetchData}\r\n      hasMore={true}\r\n      dataLength={movieArray.length}\r\n      loader={pageNumber !== 0 ? <LinearProgress variant=\"query\" color=\"secondary\"/> : null}\r\n    >\r\n      <FetchDataController\r\n        isLoaded={isLoaded}\r\n        isError={isError}\r\n        errorMessageObject={{\r\n          message: \"Error during loading\",\r\n          redirectPath: PATH_SEARCH,\r\n          redirectMessage: \"Go back to search page\",\r\n          styles: globalStyles.materialBlueFont,\r\n        }}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row justify-content-center\">\r\n            {\r\n              movieArray.map((it, index) => {\r\n                return (\r\n                  <MovieCard\r\n                    key={index}\r\n                    redirectPath={PATH_DETAILS}\r\n                    movie={it}\r\n                    title={it.title}\r\n                    posterPath={it.poster_path}\r\n                    popularity={it.popularity}\r\n                    voteAverage={it.vote_average}\r\n                    voteCount={it.vote_count}\r\n                    releaseDate={it.release_date}\r\n                    gridStyles={\"col-sm-5 col-md-4 col-lg-3 col-xl-2 m-3 p-0\"}\r\n                    titleStyles={globalStyles.materialBlueFont}\r\n                  />\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </FetchDataController>\r\n    </InfiniteScroll>\r\n  )\r\n};\r\n\r\nResultPage.propTypes = {};\r\n\r\nexport default ResultPage;\r\n    ","import React from \"react\";\r\nimport {ErrorMessage} from \"../../../component/util/error-message/ErrorMessage\";\r\nimport {PATH_HOME} from \"../../../constants\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\n\r\nexport const ErrorPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const globalStyles = GlobalStyles();\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <ErrorMessage\r\n      title={\"404\"}\r\n      message={\"Page Not Found\"}\r\n      redirectPath={PATH_HOME}\r\n      redirectMessage={\"Go back to home page\"}\r\n      styles={globalStyles.materialBlueFont}\r\n    />\r\n  );\r\n};\r\n\r\nErrorPage.propTypes = {};\r\n\r\nexport default ErrorPage;\r\n    ","import config from \"../../config\";\r\nimport {FAVOURITES_PATH, SLASH, USERS_PATH, VALUE} from \"../../constants\";\r\n\r\nexport const keyValueObjectToArray = (object) => {\r\n  if (object) {\r\n    return Object.entries(object).map(([key, value]) => (value));\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n/*----------------------- DATABASE FUNCTIONS -----------------------*/\r\nexport const setDataToDatabase = (path, childPath, data) => {\r\n  const reference = config.database().ref(path).child(childPath);\r\n\r\n  reference.once(VALUE, (it) => {\r\n    if (it.val() === null) {\r\n      if (config.auth().currentUser) {\r\n        reference\r\n          .set(data)\r\n          .catch((err) => alert(err));\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport const updateDataToDatabase = (path, childPath, data) => {\r\n  const reference = config.database().ref(path).child(childPath);\r\n\r\n  reference.once(VALUE, (it) => {\r\n    if (it.val() === null) {\r\n      if (config.auth().currentUser) {\r\n        reference\r\n          .update(data)\r\n          .catch((err) => alert(err))\r\n      }\r\n    } else {\r\n      alert(\"Item is already exists in database\");\r\n    }\r\n  });\r\n};\r\n\r\nexport const deleteDataFromDatabase = (path, childPath) => {\r\n  const reference = config.database().ref(path).child(childPath);\r\n\r\n  reference.once(VALUE, (it) => {\r\n    if (it.val() !== null) {\r\n      if (config.auth().currentUser) {\r\n        reference\r\n          .remove()\r\n          .catch((err) => alert(err))\r\n      }\r\n    } else {\r\n      alert(\"Item does not exists in database\");\r\n    }\r\n  });\r\n};\r\n\r\nexport const readDataFromDatabase = (path, eventType, setDataFunction,\r\n                                     setIsLoaded, setIsError, isSnapshotValue) => {\r\n  if (config.auth().currentUser) {\r\n    config.database()\r\n      .ref(path)\r\n      .on(eventType, (res) => {\r\n        isSnapshotValue ? setDataFunction(res.val()) : setDataFunction(res);\r\n        setIsLoaded(true);\r\n        setIsError(false);\r\n      }, () => {\r\n        setIsLoaded(true);\r\n        setIsError(true);\r\n      });\r\n  }\r\n};\r\n\r\n/*----------------------- AUTH FUNCTIONS -----------------------*/\r\nexport const registerUser = (firstName, lastName, email, password) => {\r\n  const nameData = {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n  };\r\n\r\n  config.auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then(() => {\r\n      config.auth().currentUser.sendEmailVerification().catch((err) => alert(err));\r\n      setDataToDatabase(USERS_PATH + SLASH + config.auth().currentUser.uid, SLASH, nameData);\r\n    })\r\n    .catch((err) => alert(err));\r\n};\r\n\r\nexport const loginUser = (email, password) => {\r\n  config.auth()\r\n    .signInWithEmailAndPassword(email, password)\r\n    .catch((err) => alert(err));\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  config.auth()\r\n    .signOut()\r\n    .catch((err) => alert(err));\r\n};\r\n\r\n/*----------------------- ACCOUNT FUNCTIONS -----------------------*/\r\nexport const addFavouriteMovie = (data) => {\r\n  const path = USERS_PATH + SLASH + config.auth().currentUser.uid + FAVOURITES_PATH;\r\n  updateDataToDatabase(path, data.id, data);\r\n};\r\n\r\nexport const removeFavouriteMovie = (data) => {\r\n  const path = USERS_PATH + SLASH + config.auth().currentUser.uid + FAVOURITES_PATH;\r\n  deleteDataFromDatabase(path, data.id);\r\n};\r\n","import React from \"react\"\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {PATH_REGISTER} from \"../../../constants\";\r\nimport {loginUser} from \"../../../main/controller/AccountController\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport \"../../../index.css\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\n\r\nexport const LoginPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const {register, handleSubmit} = useForm();\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const onSubmit = (data) => {\r\n    loginUser(data.email, data.password);\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container custom-container-sm custom-margin-top-4\">\r\n\r\n      <div className=\"mb-2\">\r\n        <div className=\"row justify-content-center mb-2\">\r\n          <Avatar className={globalStyles.materialBlueBackground}>\r\n            <LockOutlinedIcon/>\r\n          </Avatar>\r\n        </div>\r\n\r\n        <div className=\"row justify-content-center\">\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <TextField\r\n          type=\"email\"\r\n          inputRef={register({required: true})}\r\n          name=\"email\"\r\n          label=\"Email Address\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          autoFocus\r\n        />\r\n\r\n        <TextField\r\n          type=\"password\"\r\n          inputRef={register({required: true, min: 1})}\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n        />\r\n\r\n        <Button type=\"submit\" className=\"mt-4\" variant=\"contained\" color=\"primary\" fullWidth>\r\n          Sign in\r\n        </Button>\r\n\r\n        <div className=\"row justify-content-center mt-2\">\r\n          <Link to={PATH_REGISTER} className={globalStyles.materialBlueFont}>\r\n            Don't have an account? Sign Up\r\n          </Link>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nLoginPage.propTypes = {};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {PATH_LOGIN} from \"../../../constants\";\r\nimport {registerUser} from \"../../../main/controller/AccountController\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\n\r\nexport const RegisterPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const {register, handleSubmit} = useForm();\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const onSubmit = (data) => {\r\n    registerUser(data.firstName, data.lastName, data.email, data.password);\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container custom-container-sm custom-margin-top-4\">\r\n\r\n      <div className=\"mb-2\">\r\n        <div className=\"row justify-content-center mb-2\">\r\n          <Avatar className={globalStyles.materialBlueBackground}>\r\n            <LockOutlinedIcon/>\r\n          </Avatar>\r\n        </div>\r\n\r\n        <div className=\"row justify-content-center\">\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-6\">\r\n            <TextField\r\n              type=\"text\"\r\n              inputRef={register({required: true})}\r\n              name=\"firstName\"\r\n              label=\"First Name\"\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n              autoFocus\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-12 col-sm-6\">\r\n            <TextField\r\n              type=\"text\"\r\n              inputRef={register({required: true})}\r\n              name=\"lastName\"\r\n              label=\"Last Name\"\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <TextField\r\n          type=\"email\"\r\n          inputRef={register({required: true})}\r\n          name=\"email\"\r\n          label=\"Email Address\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n        />\r\n\r\n        <TextField\r\n          type=\"password\"\r\n          inputRef={register({required: true})}\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n        />\r\n\r\n        <Button type=\"submit\" className=\"mt-4\" variant=\"contained\" color=\"primary\" fullWidth>\r\n          Sign up\r\n        </Button>\r\n\r\n        <div className=\"row justify-content-center mt-2\">\r\n          <Link to={PATH_LOGIN} className={globalStyles.materialBlueFont}>\r\n            Already have an account? Sign in\r\n          </Link>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nRegisterPage.propTypes = {};\r\n\r\nexport default RegisterPage;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {API_LINK_POPULAR_MOVIE, LANG_EN_US, PATH_DETAILS, PATH_HOME} from \"../../../constants\";\r\nimport FetchDataController from \"../../../component/util/fetch-data-controller/FetchDataController\";\r\nimport MovieCard from \"../../../component/movie-card/MovieCard\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nexport const HomePage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [movieArray, setMovieArray] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const fetchData = () => {\r\n    axios.get(API_LINK_POPULAR_MOVIE, {\r\n      params: {\r\n        api_key: process.env.REACT_APP_API_ACCESS,\r\n        language: LANG_EN_US,\r\n        page: pageNumber + 1,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        setMovieArray(movieArray.concat(res.data.results));\r\n        setPageNumber(res.data.page);\r\n        setIsLoaded(true);\r\n        setIsError(false);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoaded(true);\r\n        setIsError(true);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <InfiniteScroll\r\n      pageStart={0}\r\n      next={fetchData}\r\n      hasMore={true}\r\n      dataLength={movieArray.length}\r\n      loader={pageNumber !== 0 ? <LinearProgress variant=\"query\" color=\"secondary\"/> : null}\r\n    >\r\n      <FetchDataController\r\n        isLoaded={isLoaded}\r\n        isError={isError}\r\n        errorMessageObject={{\r\n          message: \"Error during loading\",\r\n          redirectPath: PATH_HOME,\r\n          redirectMessage: \"Refresh Page\",\r\n          styles: globalStyles.materialBlueFont,\r\n        }}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row justify-content-center\">\r\n            {\r\n              movieArray.map((it, index) => {\r\n                return (\r\n                  <MovieCard\r\n                    key={index}\r\n                    redirectPath={PATH_DETAILS}\r\n                    movie={it}\r\n                    title={it.title}\r\n                    posterPath={it.poster_path}\r\n                    popularity={it.popularity}\r\n                    voteAverage={it.vote_average}\r\n                    voteCount={it.vote_count}\r\n                    releaseDate={it.release_date}\r\n                    gridStyles={\"col-sm-5 col-md-4 col-lg-3 col-xl-2 m-3 p-0\"}\r\n                    titleStyles={globalStyles.materialBlueFont}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </FetchDataController>\r\n    </InfiniteScroll>\r\n  );\r\n};\r\n\r\nHomePage.propTypes = {};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport {API_LINK_IMAGE} from \"../../constants\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\r\nimport \"../../index.css\";\r\n\r\nexport const MovieDetails = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const renderSectionTitle = (title) => {\r\n    return (\r\n      <h6 className=\"font-weight-bold text-center\">\r\n        {title}\r\n      </h6>\r\n    );\r\n  };\r\n\r\n  const renderBadge = (array) => {\r\n    return (\r\n      array && array.map((it, index) => {\r\n        return (\r\n          <span key={index} className={\"badge custom-font-size-0-8 mr-1 mb-2 \" + props.badgeStyles}>\r\n          {it.name}\r\n        </span>\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const renderCell = (title, value) => {\r\n    return (\r\n      <div className=\"col-6 col-sm-3 col-md-6 col-lg-3 text-center\">\r\n        <div className={\"text-nowrap \" + props.titleStyles}>\r\n          {title}\r\n        </div>\r\n        <div>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderGenres = () => {\r\n    return (\r\n      <div className=\"border-bottom p-3\">\r\n        {renderSectionTitle(props.genres.length > 1 ? \"Genres\" : \"Genre\")}\r\n        {renderBadge(props.genres)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCountries = () => {\r\n    return (\r\n      <div className=\"border-bottom p-3\">\r\n        {\r\n          renderSectionTitle(props.productionCountries.length > 1 ?\r\n            \"Production Countries\" : \"Production Country\")\r\n        }\r\n        {renderBadge(props.productionCountries)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCompanies = () => {\r\n    return (\r\n      <div className=\"border-bottom p-3\">\r\n        {\r\n          renderSectionTitle(props.productionCompanies.length > 1 ?\r\n            \"Production Companies\" : \"Production Company\")\r\n        }\r\n        {renderBadge(props.productionCompanies)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderStatistics = () => {\r\n    return (\r\n      <div className=\"border-bottom p-3\">\r\n        {renderSectionTitle(\"Statistics\")}\r\n        <div className=\"row\">\r\n          {renderCell(\"Popularity\", props.popularity)}\r\n          {renderCell(\"Average Vote\", props.voteAverage)}\r\n          {renderCell(\"Vote Number\", props.voteCount)}\r\n          {renderCell(\"Release Date\", props.releaseDate)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDescription = () => {\r\n    return (\r\n      <div className=\"border-bottom p-3\">\r\n        {renderSectionTitle(\"Description\")}\r\n        <div className=\"text-justify\">\r\n          {props.overview}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFavouriteButtons = () => {\r\n    return (\r\n      <>\r\n        <div className=\"d-flex justify-content-center pt-3 pb-1\">\r\n          <Button className=\"mt-1\" variant=\"contained\" color=\"primary\"\r\n                  onClick={() => props.addFavouriteMovie(props.movie)}>\r\n            <StarBorderIcon/> &nbsp; Add To Favourites\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-center pt-1 pb-3\">\r\n          <Button className=\"mt-1\" variant=\"contained\" color=\"secondary\"\r\n                  onClick={() => props.removeFavouriteMovie(props.movie)}>\r\n            <StarBorderIcon/> &nbsp; Remove From Favourites\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"row mt-5\">\r\n      <div className=\"col-md-6 col-lg-4 mb-4\">\r\n        {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\r\n        <img src={API_LINK_IMAGE + props.posterPath}\r\n             className=\"card-img-top\" alt=\"Movie Image\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"col-xs-6 col-lg-8 border rounded-lg custom-border mb-4 p-0\">\r\n        <div className=\"border-bottom p-3 m-0\">\r\n          <h4 className={\"text-center font-weight-bold \" + props.titleStyles}>\r\n            {props.title}\r\n          </h4>\r\n        </div>\r\n\r\n        {renderGenres()}\r\n        {renderCountries()}\r\n        {renderCompanies()}\r\n        {renderStatistics()}\r\n        {renderDescription()}\r\n\r\n        {props.isUserLoggedIn ? renderFavouriteButtons() : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieDetails.propTypes = {\r\n  movie: propTypes.object.isRequired,\r\n  title: propTypes.string,\r\n  genres: propTypes.array,\r\n  productionCountries: propTypes.array,\r\n  productionCompanies: propTypes.array,\r\n  posterPath: propTypes.string,\r\n  popularity: propTypes.number,\r\n  voteAverage: propTypes.number,\r\n  voteCount: propTypes.number,\r\n  releaseDate: propTypes.string,\r\n  overview: propTypes.string,\r\n  isUserLoggedIn: propTypes.bool.isRequired,\r\n  addFavouriteMovie: propTypes.func.isRequired,\r\n  removeFavouriteMovie: propTypes.func.isRequired,\r\n  titleStyles: propTypes.string,\r\n  badgeStyles: propTypes.string,\r\n};\r\n\r\nexport default MovieDetails;\r\n    ","import React, {useContext, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport MovieDetails from \"../../../component/movie-details/MovieDetails\";\r\nimport {SessionStorageGetItem} from \"../../../main/controller/StorageController\";\r\nimport FetchDataController from \"../../../component/util/fetch-data-controller/FetchDataController\";\r\nimport {AppContext} from \"../../../main/controller/ContextProvider\";\r\nimport {addFavouriteMovie, removeFavouriteMovie} from \"../../../main/controller/AccountController\";\r\nimport {API_LINK_DETAILS_MOVIE, CHOSEN_MOVIE, LANG_EN_US, PATH_HOME} from \"../../../constants\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\nimport ErrorMessage from \"../../../component/util/error-message/ErrorMessage\";\r\n\r\nexport const DetailsPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [movieDetails, setMovieDetails] = useState({});\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const {isUserLoggedIn} = useContext(AppContext);\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const chosenMovieStorage = SessionStorageGetItem(CHOSEN_MOVIE);\r\n\r\n  useEffect(() => {\r\n    !!chosenMovieStorage && axios.get(API_LINK_DETAILS_MOVIE + chosenMovieStorage.id, {\r\n      params: {\r\n        api_key: process.env.REACT_APP_API_ACCESS,\r\n        language: LANG_EN_US,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        setMovieDetails(res.data);\r\n        setIsLoaded(true);\r\n        setIsError(false);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoaded(true);\r\n        setIsError(true);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    !!chosenMovieStorage ?\r\n      <FetchDataController\r\n        isLoaded={isLoaded}\r\n        isError={isError}\r\n        errorMessageObject={{\r\n          message: \"Error during loading\",\r\n          redirectPath: PATH_HOME,\r\n          redirectMessage: \"Refresh Page\",\r\n          styles: globalStyles.materialBlueFont,\r\n        }}\r\n      >\r\n        <div className=\"container\">\r\n          <MovieDetails\r\n            movie={SessionStorageGetItem(CHOSEN_MOVIE)}\r\n            posterPath={movieDetails.poster_path}\r\n            title={movieDetails.title}\r\n            genres={movieDetails.genres}\r\n            productionCountries={movieDetails.production_countries}\r\n            productionCompanies={movieDetails.production_companies}\r\n            popularity={movieDetails.popularity}\r\n            voteAverage={movieDetails.vote_average}\r\n            voteCount={movieDetails.vote_count}\r\n            releaseDate={movieDetails.release_date}\r\n            overview={movieDetails.overview}\r\n            isUserLoggedIn={isUserLoggedIn}\r\n            addFavouriteMovie={addFavouriteMovie}\r\n            removeFavouriteMovie={removeFavouriteMovie}\r\n            titleStyles={globalStyles.materialBlueFont}\r\n            badgeStyles={globalStyles.materialBlueBackground}\r\n          />\r\n        </div>\r\n      </FetchDataController>\r\n      :\r\n      <ErrorMessage\r\n        message={\"Error during loading\"}\r\n        redirectPath={PATH_HOME}\r\n        redirectMessage={\"Redirect To Main Page\"}\r\n        styles={globalStyles.materialBlueFont}\r\n      />\r\n  );\r\n};\r\n\r\nDetailsPage.propTypes = {};\r\n\r\nexport default DetailsPage;\r\n    ","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport \"../../index.css\";\r\n\r\nexport const AccountPanel = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const renderDataElement = (key, value) => {\r\n    return (\r\n      <>\r\n        <div className=\"px-5 text-justify mt-2\">\r\n          <h6>\r\n            {key + \": \" + value}\r\n          </h6>\r\n        </div>\r\n        <div className=\"px-4\">\r\n          <hr className=\"border-white m-1\"/>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <div className=\"col-sm-8\">\r\n        <h4 className=\"card-title text-center\">\r\n          {props.name}\r\n        </h4>\r\n        {renderDataElement(\"Email\", props.email)}\r\n        {renderDataElement(\"Email Verified\", props.emailVerified)}\r\n        {renderDataElement(\"Last sign in\", props.lastSignInTime)}\r\n        {renderDataElement(\"Registration Date\", props.creationTime)}\r\n      </div>\r\n    )\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <div className=\"container custom-container-lg text-white\">\r\n      <div className={\"card mt-5 \" + props.backgroundColorStyles}>\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-4 custom-font-size-9\">\r\n              <AccountBoxIcon fontSize=\"inherit\"/>\r\n            </div>\r\n\r\n            {renderData()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAccountPanel.propTypes = {\r\n  name: propTypes.string,\r\n  email: propTypes.string,\r\n  emailVerified: propTypes.bool,\r\n  lastSignInTime: propTypes.string,\r\n  creationTime: propTypes.string,\r\n  backgroundColorStyles: propTypes.string.isRequired\r\n};\r\n\r\nexport default AccountPanel;\r\n    ","import React, {useEffect, useState} from \"react\";\r\nimport FetchDataController from \"../../../component/util/fetch-data-controller/FetchDataController\";\r\nimport config from \"../../../config\";\r\nimport {\r\n  keyValueObjectToArray,\r\n  readDataFromDatabase\r\n} from \"../../../main/controller/AccountController\";\r\nimport ErrorMessage from \"../../../component/util/error-message/ErrorMessage\";\r\nimport MovieCard from \"../../../component/movie-card/MovieCard\";\r\nimport AccountPanel from \"../../../component/account-panel/AccountPanel\";\r\nimport {\r\n  FAVOURITES_PATH,\r\n  PATH_DETAILS,\r\n  PATH_HOME,\r\n  SLASH,\r\n  USERS_PATH,\r\n  VALUE\r\n} from \"../../../constants\";\r\nimport \"../../../index.css\";\r\nimport GlobalStyles from \"../../../main/GlobalStyles\";\r\n\r\nexport const AccountPage = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [userData, setUserData] = useState(\"\");\r\n  const [favouriteMovieArray, setFavouriteMovieArray] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [firebaseAuthState, setFirebaseAuthState] = useState(null);\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const setFormatUserData = (data) => {\r\n    if (data) {\r\n      setUserData(data.firstName + \" \" + data.lastName)\r\n    }\r\n  };\r\n\r\n  const setObjectToArray = (data) => {\r\n    setFavouriteMovieArray(keyValueObjectToArray(data.val()));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const path = USERS_PATH + SLASH + config.auth().currentUser.uid;\r\n    readDataFromDatabase(path, VALUE, setFormatUserData, setIsLoaded, setIsError, true);\r\n    readDataFromDatabase(path + FAVOURITES_PATH, VALUE, setObjectToArray, setIsLoaded, setIsError, false);\r\n\r\n    setFirebaseAuthState(config.auth().currentUser);\r\n  }, []);\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    firebaseAuthState ?\r\n      <>\r\n        <FetchDataController\r\n          isLoaded={isLoaded}\r\n          isError={isError}\r\n          errorMessageObject={{\r\n            message: \"Error during loading\",\r\n            redirectPath: PATH_HOME,\r\n            redirectMessage: \"Refresh Page\",\r\n            styles: globalStyles.materialBlueFont,\r\n          }}\r\n        >\r\n          <>\r\n            <AccountPanel\r\n              name={userData}\r\n              email={firebaseAuthState.email}\r\n              emailVerified={firebaseAuthState.emailVerified}\r\n              lastSignInTime={firebaseAuthState.metadata.lastSignInTime}\r\n              creationTime={firebaseAuthState.metadata.creationTime}\r\n              backgroundColorStyles={globalStyles.materialBlueBackground}\r\n            />\r\n\r\n            <div className=\"container-fluid mt-4\">\r\n              <div className=\"row justify-content-center\">\r\n                {\r\n                  favouriteMovieArray.map((it, index) => {\r\n                    return (\r\n                      <MovieCard\r\n                        key={index}\r\n                        redirectPath={PATH_DETAILS}\r\n                        movie={it}\r\n                        title={it.title}\r\n                        posterPath={it.poster_path}\r\n                        popularity={it.popularity}\r\n                        voteAverage={it.vote_average}\r\n                        voteCount={it.vote_count}\r\n                        releaseDate={it.release_date}\r\n                        gridStyles={\"col-sm-5 col-md-4 col-lg-3 col-xl-2 m-3 p-0\"}\r\n                        titleStyles={globalStyles.materialBlueFont}\r\n                      />\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </div>\r\n          </>\r\n        </FetchDataController>\r\n      </>\r\n      :\r\n      <ErrorMessage\r\n        message={\"Error during loading\"}\r\n        redirectPath={PATH_HOME}\r\n        redirectMessage={\"Redirect To Main Page\"}\r\n        styles={globalStyles.materialBlueFont}\r\n      />\r\n  );\r\n};\r\n\r\nAccountPage.propTypes = {};\r\n\r\nexport default AccountPage;\r\n    ","import React, {useContext} from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {SessionStorageGetItem} from \"./StorageController\";\r\nimport PrivateRoute from \"../../component/util/private-route/PrivateRoute\";\r\nimport {AppContext} from \"./ContextProvider\";\r\nimport SearchPage from \"../../page/basic-functionality/search-page/SearchPage\";\r\nimport AboutPage from \"../../page/util/about-page/AboutPage\";\r\nimport ContactPage from \"../../page/util/contact-page/ContactPage\";\r\nimport ResultPage from \"../../page/basic-functionality/result-page/ResultPage\";\r\nimport ErrorPage from \"../../page/util/error-page/ErrorPage\";\r\nimport LoginPage from \"../../page/account/login-page/LoginPage\";\r\nimport RegisterPage from \"../../page/account/register-page/RegisterPage\";\r\nimport HomePage from \"../../page/basic-functionality/home-page/HomePage\";\r\nimport DetailsPage from \"../../page/basic-functionality/details-page/DetailsPage\";\r\nimport AccountPage from \"../../page/account/account-page/AccountPage\";\r\nimport {\r\n  PATH_ABOUT,\r\n  PATH_ACCOUNT,\r\n  PATH_CONTACT,\r\n  PATH_DETAILS,\r\n  PATH_HOME,\r\n  PATH_LOGIN,\r\n  PATH_REGISTER,\r\n  PATH_RESULT,\r\n  PATH_SEARCH,\r\n  SEARCHED_MOVIE_DATA\r\n} from \"../../constants\";\r\n\r\nexport const Routes = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const {isUserLoggedIn} = useContext(AppContext);\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <Switch>\r\n      <PrivateRoute\r\n        exact path={PATH_LOGIN} component={LoginPage}\r\n        redirectPath={PATH_ACCOUNT} privacyCondition={!isUserLoggedIn}\r\n      />\r\n      <PrivateRoute\r\n        exact path={PATH_REGISTER} component={RegisterPage}\r\n        redirectPath={PATH_LOGIN} privacyCondition={!isUserLoggedIn}\r\n      />\r\n      <PrivateRoute\r\n        exact path={PATH_ACCOUNT} component={AccountPage}\r\n        redirectPath={PATH_LOGIN} privacyCondition={isUserLoggedIn}\r\n      />\r\n\r\n      <Route exact path={PATH_HOME} component={HomePage}/>\r\n      <Route exact path={PATH_DETAILS} component={DetailsPage}/>\r\n      <Route exact path={PATH_SEARCH} component={SearchPage}/>\r\n      <PrivateRoute\r\n        exact path={PATH_RESULT} component={ResultPage}\r\n        redirectPath={PATH_SEARCH} privacyCondition={SessionStorageGetItem(SEARCHED_MOVIE_DATA)}\r\n      />\r\n\r\n      <Route exact path={PATH_ABOUT} component={AboutPage}/>\r\n      <Route exact path={PATH_CONTACT} component={ContactPage}/>\r\n      <Route component={ErrorPage}/>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n  PATH_ABOUT,\r\n  PATH_ACCOUNT,\r\n  PATH_CONTACT,\r\n  PATH_HOME,\r\n  PATH_LOGIN,\r\n  PATH_SEARCH\r\n} from \"../../constants\";\r\nimport {IconButton, Switch, Typography} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\r\nimport NightsStayIcon from \"@material-ui/icons/NightsStay\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport \"../../index.css\";\r\nimport GlobalStyles from \"../../main/GlobalStyles\";\r\n\r\nexport const Navbar = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const globalStyles = GlobalStyles();\r\n\r\n  const renderThemeToggler = () => {\r\n    return (\r\n      <div className=\"mr-auto\">\r\n        <WbSunnyIcon/>\r\n        <Switch\r\n          checked={props.isDarkMode}\r\n          onChange={props.handleDarkMode}\r\n          color=\"default\"\r\n        />\r\n        <NightsStayIcon/>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderNavItemList = () => {\r\n    return (\r\n      <div className=\"collapse navbar-collapse\" id=\"navList\">\r\n        <div className=\"navbar-nav ml-auto text-center\">\r\n\r\n          <Link to={PATH_SEARCH} className=\"text-white\">\r\n            <IconButton color=\"inherit\">\r\n              <SearchIcon/>\r\n            </IconButton>\r\n          </Link>\r\n\r\n          <Link to={PATH_ABOUT} className=\"text-white\">\r\n            <IconButton color=\"inherit\">\r\n              <InfoIcon/>\r\n            </IconButton>\r\n          </Link>\r\n\r\n          <Link to={PATH_CONTACT} className=\"text-white\">\r\n            <IconButton color=\"inherit\">\r\n              <MailIcon/>\r\n            </IconButton>\r\n          </Link>\r\n\r\n          <Link to={props.isUserLoggedIn ? PATH_ACCOUNT : PATH_LOGIN} className=\"text-white\">\r\n            <IconButton color=\"inherit\">\r\n              <AccountCircle/>\r\n            </IconButton>\r\n          </Link>\r\n\r\n          <div onClick={props.logout}>\r\n            {\r\n              props.isUserLoggedIn ?\r\n                <IconButton color=\"inherit\">\r\n                  <ExitToAppIcon/>\r\n                </IconButton>\r\n                : null\r\n            }\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderContent = () => {\r\n    return (\r\n      props.children\r\n    );\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <>\r\n      <nav className={\"navbar navbar-expand-lg navbar-dark text-white \"\r\n      + globalStyles.materialBlueBackground}>\r\n        <Link to={PATH_HOME} className=\"navbar-brand\">\r\n          <Typography className=\"mr-3\" variant=\"h6\" noWrap>\r\n            {props.msg}\r\n          </Typography>\r\n        </Link>\r\n\r\n        {renderThemeToggler()}\r\n\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                data-target=\"#navList\" aria-controls=\"navList\" aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        {renderNavItemList()}\r\n      </nav>\r\n\r\n      {renderContent()}\r\n    </>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = {\r\n  msg: propTypes.string.isRequired,\r\n  isDarkMode: propTypes.bool.isRequired,\r\n  handleDarkMode: propTypes.func.isRequired,\r\n  isUserLoggedIn: propTypes.bool,\r\n  logout: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Navbar;\r\n","import React, {useContext, useState} from \"react\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Routes from \"./controller/Routes\";\r\nimport {AppContext} from \"./controller/ContextProvider\";\r\nimport {logoutUser} from \"./controller/AccountController\";\r\nimport {createMuiTheme, CssBaseline} from \"@material-ui/core\";\r\nimport Navbar from \"../component/navbar/Navbar\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport \"../index.css\";\r\n\r\nexport const App = (props) => {\r\n\r\n  /*----------------------- VARIABLE REGION -----------------------*/\r\n  const [isDarkMode, setIsDarkMode] = useState(true);\r\n  const {isUserLoggedIn} = useContext(AppContext);\r\n\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      type: isDarkMode ? \"dark\" : \"light\",\r\n      primary: {\r\n        main: \"#2196f3\",\r\n      },\r\n      grey: {\r\n        main: \"#424242\",\r\n        light: \"#616161\",\r\n      },\r\n    },\r\n  });\r\n\r\n  const handleDarkMode = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  /*------------------------ RETURN REGION ------------------------*/\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <CssBaseline/>\r\n      <HashRouter>\r\n        <Navbar\r\n          msg=\"Film Website\"\r\n          isDarkMode={isDarkMode}\r\n          handleDarkMode={handleDarkMode}\r\n          isUserLoggedIn={isUserLoggedIn}\r\n          logout={logoutUser}\r\n        >\r\n          <Routes/>\r\n        </Navbar>\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n    ","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"jquery/dist/jquery.min.js\";\r\nimport \"bootstrap/dist/js/bootstrap.min.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./main/App\";\r\nimport ContextProvider from \"./main/controller/ContextProvider\";\r\n\r\nReactDOM.render(\r\n  <ContextProvider>\r\n    <App/>\r\n  </ContextProvider>,\r\n  document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}